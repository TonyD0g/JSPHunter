package org.sec.Form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class HowThisWork {
    public JPanel workPanel;
    private JLabel firstLabel;
    private JLabel secondLabel;
    private JLabel thirdLabel;
    private JLabel fourthLabel;
    private JLabel fifthLabel;
    private JLabel sixthLabel;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        workPanel = new JPanel();
        // 使用 GridBagLayout 替代 GridLayoutManager
        workPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 15, 8, 15); // 上下间距8px，左右间距15px
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0; // 水平填充

        Font workPanelFont = this.$$$getFont$$$("Consolas", -1, 20, workPanel.getFont());
        if (workPanelFont != null) workPanel.setFont(workPanelFont);
        workPanel.setBorder(BorderFactory.createTitledBorder(null, "steps",
                TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));

        // 标签1
        firstLabel = new JLabel();
        Font firstLabelFont = this.$$$getFont$$$("Consolas", -1, 20, firstLabel.getFont());
        if (firstLabelFont != null) firstLabel.setFont(firstLabelFont);
        firstLabel.setText("1. 获取输入的 Jsp 文件或列表,并将其一个个编译为 .java 文件 (通过原生的依赖来编译,而非模版)");
        gbc.gridx = 0;
        gbc.gridy = 0;
        workPanel.add(firstLabel, gbc);

        // 标签2
        secondLabel = new JLabel();
        Font secondLabelFont = this.$$$getFont$$$("Consolas", -1, 20, secondLabel.getFont());
        if (secondLabelFont != null) secondLabel.setFont(secondLabelFont);
        secondLabel.setText("2. 使用 ASM 库获取每个 .java 文件中 _jspService 函数所使用的所有函数和类");
        gbc.gridy = 1;
        workPanel.add(secondLabel, gbc);

        // 标签3
        thirdLabel = new JLabel();
        Font thirdLabelFont = this.$$$getFont$$$("Consolas", -1, 20, thirdLabel.getFont());
        if (thirdLabelFont != null) thirdLabel.setFont(thirdLabelFont);
        thirdLabel.setText("3. 在每个方法中查找所有方法调用");
        gbc.gridy = 2;
        workPanel.add(thirdLabel, gbc);

        // 标签4
        fourthLabel = new JLabel();
        Font fourthLabelFont = this.$$$getFont$$$("Consolas", -1, 20, fourthLabel.getFont());
        if (fourthLabelFont != null) fourthLabel.setFont(fourthLabelFont);
        fourthLabel.setText("4. 拓扑排序方法,得知调用顺序");
        gbc.gridy = 3;
        workPanel.add(fourthLabel, gbc);

        // 标签5
        fifthLabel = new JLabel();
        Font fifthLabelFont = this.$$$getFont$$$("Consolas", -1, 20, fifthLabel.getFont());
        if (fifthLabelFont != null) fifthLabel.setFont(fifthLabelFont);
        fifthLabel.setText("5. 在方法调用之间获取参数污点,主要是通过外部源入手,将外部源会用到的函数进行匹配并将其作为 source");
        gbc.gridy = 4;
        workPanel.add(fifthLabel, gbc);

        // 标签6
        sixthLabel = new JLabel();
        Font sixthLabelFont = this.$$$getFont$$$("Consolas", -1, 20, sixthLabel.getFont());
        if (sixthLabelFont != null) sixthLabel.setFont(sixthLabelFont);
        sixthLabel.setText("6. 通过模拟栈帧的方式来模拟函数执行过程,如果定义的 source 流入了恶意函数中,则有理由怀疑其为恶意 JSP Webshell");
        gbc.gridy = 5;
        workPanel.add(sixthLabel, gbc);

        // 添加垂直弹性空间使标签靠上显示
        gbc.gridy = 6;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        workPanel.add(Box.createGlue(), gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return workPanel;
    }

}
